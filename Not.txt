2. Videoda Sýnýflar tanýmlandý.

3. Videoda EntityLayer Sýnýfýnda Concrete klasöründe entity sýnýfýlarýmýzý tanýmladýk databasee yansýcak olanlarý

4. Videoda SQL baðlantýsý yaptýk ve EntityLayer sýnýfýndaki tanýmlanan sýnýflarý databasemize yansýttýk

5. Videoda SQL tarafýnda UserIdentity sýnýfýna gerekli ekstra baþlýklarý ekleyebilmek için bir appuser ve approle sýnýflarý EntityLayer
katmanýmýza ekledik onlarýn içinde birer prop ekledik ve appuserý identityuser ile iliþkilendirdik ve approlede identityrole eþitlemiþ 
olduk ardýndan context sýnýfýna gelip IdentityDbContext<AppUser,AppRole,int> bunu silip DBContext ekledik ki SQL sýnýfýna verileri 
tekrardan ekleyelim ardýndan ctrl+z yaptýk geri geldi IdentityDbContext sonra packagemanageconsole da bunu SQL yansýttýk

6. Videoda	tabloda iliþkileri nasýl kurucaðýmýz öðrendik. Ýlk baþta kurmak istediðimiz yere gelip hangi kuracaðýmýz tabloyu oraya 
ilk ýdsini yazdýrýyoruz ardýndan ondan bir kalýntý gibi birþey almak için prop Appuser Appuser gibi tanýmlama yapýyoruz CustomerAccount
sýnýfýnda bulabilirsin ardýndan orada tanýmladýðýmýzý bide appuser sýnýfýndada tanýmlamamýz gerekiyor. Appuser sýnýfýndada görebilirsin
Appuser sýnýfýnda bu sefer prop List<CustomerAccount> SQL Adý yazýyoruz. Bu videoda bide registerDto tanýmlandý SQL verilerini çekmek için

7. Videoda BusinessLayer katmanýnda bir paket yüklendi validasyon paketi kurallarý koymak için ardýndan BusinessLayer katmanýna Validasyon
klasörü oluþturduk ve her bir sýnýf için ayrý bir validasyon oluþturduk ve bu sýnýflara giriþ yapýp baktýðýnda içindeki kodlarda açýklama
satýrlarýný görebilirsin tanýmlamalar yapýldý.

8. Videoda DataAccessLayer abstract(interfaceleri tutucak) klasörü interfacelerimizi tutucak. Repositories(crud iþlemleri tekrardan kurtarýr klasör
Abstarct klasörünün içine bir interface tanýmladýk IGenericDal olarak ve crud iþlemlerini tekrardan kuratarýyor tek seferde tanýmlanýyor.
Ayriyetten tanýmlanan ICustomerAccount ve Process Ýnterfaceleri crud iþlemler haricinde herhangi bir baþka iþlemde kullanýlmasý için 
crud iþlemlerine karýþmaksýzýn orada istenilen metod tanýmlanabilir. Repository de iste tanýmlanan metodlarýn iþleme alýnmasý için 
detaylý kodlama yapýlýr.

9. Videoda BusinessLayer Katmanýnda iki klasör eklendi ilki Abstract klasörü buradada DataAccessLayer katmannýda olduðu gibi crud iþlemleri
için IGenericService içine crud iþlemlerini tanýmladýk ve bunlarýn baþlarýna T koyduk ve CustomerAccount ve Process için ayrý tanýmlanan
methodlar içinde abstractda klasör açtýk. Bir sonraki adýmda ise Concrete klasörünü tanýmladýk o klasörde CustomerAccountManager ve 
ProcessManager tanýmladýk. Bunlarý IGenericServiceden crud iþlemleri için implemente aldýk ardýndan DataAccessLayer kýsmýndaki 
ICustomerAccountDal ve ProcessDal dan bir miras aldýk ve crud iþlemlerin içine DataAccesLayerdaki crud iþlemleri çaðýrýp iþlemleri
gerçekleþmesi için gerekli kodlarý yazdýk.

10. Videoda da bir register sayfasý oluþturduk ve register ile alakalý düzenlemeler yaptýk. Ardýndan RegisterControllerda controller 
açtýk ve ardýndan içine bir index oluþturduk bu indexde giriþ yapýlmasý için gerekli veri giriþlerini dtodan çektik. Bunlarý index 
tarafýna çaðýrdýk ve bir giriþ yapma kodlarý yazdýk.

11. Videoda Yapýlan Register için View Olan ýndex sayfasýna kayýt olabilmesi için ve password yanlýþ yazýldýðýnda kullanýcýya çýkarýlan
uyarýlarý göstermek için bir düzeltme yapýldý ilk index tarafýnda bir düzeltme oldu modelonly yazýldý divin içine ardýndan bunu 
RegisterController sayfasýnda çaðýrmýþ olduk.

12. Videoda PresentationLayer katmanýna bir customeridentityvalidator adýnda vbir model oluþturduk ardýndan bu oluþturulan modelde ise 
password kýsmýnda büyük küçük harf gibi uyarýlarý kullanýcýya türkçe þeklinde göstermek için gerekli kodlamalý ve override ne anlama
geldiðini öðrendik override tanýmlanan bir kodu kendimiz nasýl tercihlerle devam ettireceðimizi belirleyecek þekilde açýkladým ben 
program cs tarafýnda AddErrorDescriber<CustomIdentityValidator>(); bu kodlar tanýmlanmýþtýr.

13. Videoda bir confirmcode ile alakalý EntityLayer katmanýnda appuser içine confirmcode eklendi ve bu confirmcode database entegre edildi
ardýndan RegisterControllerda random bir sayý oluþturuldu ve confirmcode random sayýya entegre oldu.

14. Videoda Index içine confirm code gelene 6 haneli sayýyý karþý tarafýn mailine gönderme iþlemi yapýldý registerController da 
görebilirsin.

15. Videoda ConfirmCode için yapýlan sayfada mail adresini taþýyabiliyormuyuz diye kontroller yaptýk ve RegisterController içine bir 
tempdata tanýmladýk ve mail ile gelip gelmediðine baktýk bunu CondirmCodeController sayfasýnda baktýk tempdata ile mail taþýma iþlemi ve
yanýna bir iþlem taþýyabiliyormuyuz diye baktýk ve taþýnýyor bunu haricinde taþýma yapabilmek için bir model oluþturduk ama daha 
kullanmadýk

16. Videoda Bir Model oluþturuldu ConfirmMailViewModel orada hem mail hemde confirmcode tutuldu ardýndan bunlarý confirmMailController
da çaðrýldý ve onaylama iþlemi yaptýrdýk gelen confirm koduyla 

17. Videoda confirmcode statusu false geliyordu bunu 6 haneli gelen kodu girip confirmcode true hale getirmek için gerekli kodlar 
confirmcontroller tanýmladýk confirmcode true hale getirdik

18. Videoda Login iþlemi yapýldý ilk baþta LoginController tanýmlandý ardýndan bir model tanýmladýk verileri databaseden çekmek için
ardýndan loginController Usermanager ve Signinmanagerlarýn bir verilerini tuttuk sonrasýnda httpget ve httppost ayalarýný ayarladýk ve 
biz httppost ile çalýþacaðýz. PasswordAsync olarak seçtik loginviewmodelden hem username seçtik hemde password seçtik gelen deðerleri
sonuca atayalým eðer sonuç doðru ise bize bir user diye deðiþken atamamýz lazým userýn username verisini tutmamýz için bunu seçtirmemiz 
gerekecektir ve bunu da userda findbyname name þeklinde seçmemiz gerekicek parantez açtýk ve loginviewmodelden gelen username seçtirdik
eðer usernameden gelen confirmcode doðru ise bizi istediðimiz sayfaya yönlendircek.

19. Videoda Müþteri Sayfasýnda düzenlemeler yaptýk MyProfileControllerdaki index içine Müþteri sayfasýný ekledik ve birer viewcomponent
ayýrdýk ilk baþta PresentationLayer katmanýna ViewComponents oluþturduk onun için ayrý bir klasör olarak member oluþturduk yani müþteri
buraya bir class açtýk ve Invoke olarak tanýmladýk ardýndan shared içine Components tanýmladýk ve memberin içinde classlarý isimlerini
klasörlerin isimleri yaptýk ve bir razor view oluþturuduk onuda partialcomponent olarak ismide default olarak oluþturduk.

20. Video Ýzle